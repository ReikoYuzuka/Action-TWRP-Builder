name: Recovery Build

on:
  workflow_dispatch:
    inputs:
      MANIFEST_URL:
        description: 'MANIFEST_URL (if want to use SSH keys, use git@github.com:XXXXX)'
        required: true
        default: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp'
      MANIFEST_BRANCH:
        description: 'MANIFEST_BRANCH'
        required: true
        default: 'twrp-14.1'
      DEVICE_TREE_URL:
        description: 'DEVICE_TREE_URL'
        required: true
        default: 'https://github.com/ReikoYuzuka/android_device_oplus_ossi'
      DEVICE_TREE_BRANCH:
        description: 'DEVICE_TREE_BRANCH'
        required: true
        default: 'main'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/oplus/ossi'
      COMMON_TREE_URL:
        description: 'COMMON_TREE_URL (if no common tree, leave blank)'
        required: false
      COMMON_PATH:
        description: 'COMMON_PATH (if no common tree, leave blank)'
        required: false
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'ossi'
      MAKEFILE_NAME:
        description: 'MAKEFILE_NAME'
        required: true
        default: 'omni_ossi'
      BUILD_TARGET:
        description: 'BUILD_TARGET'
        required: true
        default: 'recovery'

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
    - name: Display Run Parameters
      run: |
        echo "::group::User Environment Variables"
        echo "Manifest URL: ${{ github.event.inputs.MANIFEST_URL }}"
        echo "Manifest Branch: ${{ github.event.inputs.MANIFEST_BRANCH }}"
        echo "Device Tree URL: ${{ github.event.inputs.DEVICE_TREE_URL }}"
        echo "Device Tree Branch: ${{ github.event.inputs.DEVICE_TREE_BRANCH }}"
        echo "Device Path: ${{ github.event.inputs.DEVICE_PATH }}"
        echo "Device Name: ${{ github.event.inputs.DEVICE_NAME }}"
        echo "Makefile Name: ${{ github.event.inputs.MAKEFILE_NAME }}"
        echo "Build Target: ${{ github.event.inputs.BUILD_TARGET }}.img"
        echo "::endgroup::"
    
    # 改进的磁盘空间检查 - 自动查找最大分区
    - name: Check Disk Space
      id: disk-check
      run: |
        # 安装必要工具
        sudo apt update
        sudo apt install -y util-linux jq
        
        # 获取所有分区信息并找到最大可用空间的分区
        echo "::group::Disk Partition Information"
        df -h
        echo "::endgroup::"
        
        # 获取所有挂载点的可用空间（以MB为单位）
        PARTITION_INFO=$(df -B M --output=avail,target | tail -n +2)
        
        # 找到最大可用空间的分区
        MAX_SPACE=0
        MAX_PARTITION=""
        
        while read -r line; do
          SPACE=$(echo $line | awk '{print $1}' | tr -d 'M')
          PARTITION=$(echo $line | awk '{print $2}')
          
          # 跳过特殊文件系统和只读分区
          if [[ $PARTITION == /dev* ]] || [[ $PARTITION == /sys* ]] || [[ $PARTITION == /proc* ]] || 
             [[ $PARTITION == /run* ]] || [[ $PARTITION == /snap* ]] || 
             [[ $(findmnt -n -o OPTIONS $PARTITION) == *ro* ]]; then
            continue
          fi
          
          if [ "$SPACE" -gt "$MAX_SPACE" ]; then
            MAX_SPACE=$SPACE
            MAX_PARTITION=$PARTITION
          fi
        done <<< "$PARTITION_INFO"
        
        # 转换为GB
        MAX_SPACE_GB=$((MAX_SPACE / 1024))
        
        echo "最大可用空间分区: $MAX_PARTITION"
        echo "可用空间: ${MAX_SPACE_GB}GB"
        
        # 设置最小空间要求
        MIN_SPACE=25
        
        if [ "$MAX_SPACE_GB" -lt "$MIN_SPACE" ]; then
          echo "⚠️ 警告：最大分区空间不足 (${MAX_SPACE_GB}GB < ${MIN_SPACE}GB)"
          
          # 自动清理最大分区
          echo "::group::Cleaning Up Disk Space on $MAX_PARTITION"
          
          # 根据分区类型执行不同的清理策略
          if [[ $MAX_PARTITION == /home* ]]; then
            echo "清理Home分区..."
            # 保留最近2个工作区
            if [ -d "/home/runner/actions-runner/_work" ]; then
              cd /home/runner/actions-runner/_work
              ls -t | tail -n +3 | xargs rm -rf
            fi
            # 清理旧日志
            find /home/runner/actions-runner/cached/_diag -type f -mtime +7 -delete
          else
            echo "清理系统分区..."
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d/* 
            sudo apt clean
            sudo rm -rf /__t/* /__w/* /__e/*
            docker system prune -af || true
          fi
          
          # 清理构建缓存
          if [ -d "/tmp" ]; then
            sudo rm -rf /tmp/*
          fi
          if [ -d "/var/tmp" ]; then
            sudo rm -rf /var/tmp/*
          fi
          
          echo "::endgroup::"
          
          # 重新检查空间
          MAX_SPACE_GB=$(($(df -B M --output=avail $MAX_PARTITION | tail -1 | tr -d 'M') / 1024))
          
          if [ "$MAX_SPACE_GB" -lt "$MIN_SPACE" ]; then
            echo "❌ 错误：清理后空间仍然不足 (${MAX_SPACE_GB}GB)"
            exit 1
          else
            echo "✅ 清理成功，当前可用空间: ${MAX_SPACE_GB}GB"
          fi
        else
          echo "✅ 磁盘空间充足: ${MAX_SPACE_GB}GB (>= ${MIN_SPACE}GB)"
        fi
        
        # 设置输出变量
        echo "max_partition=$MAX_PARTITION" >> $GITHUB_OUTPUT
        echo "free_space_gb=$MAX_SPACE_GB" >> $GITHUB_OUTPUT
        echo "min_required_gb=$MIN_SPACE" >> $GITHUB_OUTPUT

    # You might want to Checkout your repo first, but not mandatory
    - name: Check Out
      uses: actions/checkout@v4

    # Cleanup The Actions Workspace Using Custom Composite Run Actions
    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main
      # That's it! Now use your normal steps

    - name: Prepare the environment
      run: |
        sudo apt update && sudo apt upgrade -y
        DEBIAN_FRONTEND=noninteractive sudo apt install -yq \
            linux-modules-extra-$(uname -r) \
            gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib \
            libc6-dev lib32ncurses-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils \
            xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses-dev libsdl1.2-dev \
            build-essential libgtk-3-dev libglu1-mesa-dev freeglut3-dev git libxml2 lzop pngcrush schedtool squashfs-tools \
            imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libncurses6 python3 tar
        
        # 安装高级磁盘监控工具
        sudo apt install -yq ncdu iotop

    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup SSH Keys
      if: ${{ startsWith(github.event.inputs.MANIFEST_URL, 'git@github.com') || 
          startsWith(github.event.inputs.DEVICE_TREE_URL, 'git@github.com') ||
          startsWith(github.event.inputs.COMMON_TREE_URL, 'git@github.com') }}
      uses: webfactory/ssh-agent@v0.9.0
      with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo
        
        # 显示当前磁盘空间（重点显示最大分区）
        echo "::group::Disk Space on ${{ steps.disk-check.outputs.max_partition }}"
        df -h ${{ steps.disk-check.outputs.max_partition }}
        echo "::endgroup::"
    - name: Initialize repo
      run: |
        # 在工作区创建前显示空间
        echo "::group::Pre-Workspace Disk Usage"
        df -h ${{ steps.disk-check.outputs.max_partition }}
        echo "::endgroup::"
        
        mkdir workspace
        cd workspace
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        git config --global user.name "Nico170420"
        git config --global user.email "b170420nc@gmail.com"
        repo init --depth=1 -u ${{ github.event.inputs.MANIFEST_URL }} -b ${{ github.event.inputs.MANIFEST_BRANCH }}
      id: pwd

    - name: Repo Sync
      run: |
        # 显示同步前空间
        echo "::group::Disk Space Before Repo Sync"
        df -h ${{ steps.disk-check.outputs.max_partition }}
        echo "::endgroup::"
        
        repo sync -j$(nproc --all) --force-sync
        
        # 显示同步后空间
        echo "::group::Disk Space After Repo Sync"
        df -h ${{ steps.disk-check.outputs.max_partition }}
        echo "::endgroup::"
      working-directory: workspace

    - name: Clone device tree
      run: |
        git clone ${{ github.event.inputs.DEVICE_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Clone common tree
      if: |
        github.event.inputs.COMMON_TREE_URL != null
        && github.event.inputs.COMMON_PATH != null
      run: |
        git clone ${{ github.event.inputs.COMMON_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.COMMON_PATH }}
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Check Build Tree
      uses: haya14busa/action-cond@v1
      id: buildtree
      with:
        cond: ${{ github.event.inputs.MANIFEST_BRANCH == 'twrp-11' || github.event.inputs.MANIFEST_BRANCH == 'twrp-12.1' }}
        if_true: twrp
        if_false: omni

    - name: Sync Device Dependencies
      run: |
        bash ${GITHUB_WORKSPACE}/scripts/convert.sh ${{ github.event.inputs.DEVICE_PATH }}/${{ steps.buildtree.outputs.value }}.dependencies
        repo sync -j$(nproc --all)
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}
      continue-on-error: true

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12

    - name: Building recovery
      run: |
        # 显示构建前空间
        echo "::group::Disk Space Before Building"
        df -h ${{ steps.disk-check.outputs.max_partition }}
        echo "::endgroup::"
        
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch ${{ github.event.inputs.MAKEFILE_NAME }}-eng && make clean && make ${{ github.event.inputs.BUILD_TARGET }}image -j$(nproc --all)
        
        # 显示构建后空间
        echo "::group::Disk Space After Building"
        df -h ${{ steps.disk-check.outputs.max_partition }}
        du -sh out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*
        echo "::endgroup::"
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Upload to Release
      uses: softprops/action-gh-release@v2
      with:
        files: | 
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/${{ github.event.inputs.BUILD_TARGET }}.img
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.zip
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*vendor*.img
        name: ${{ github.event.inputs.DEVICE_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: |
          Manifest: ${{ github.event.inputs.MANIFEST_BRANCH }}
          Device: ${{ github.event.inputs.DEVICE_NAME }}
          Target: ${{ github.event.inputs.BUILD_TARGET }}.img
          Disk Info: 
            Partition: ${{ steps.disk-check.outputs.max_partition }}
            Free Space: ${{ steps.disk-check.outputs.free_space_gb }}GB (before build)
            Minimum Required: ${{ steps.disk-check.outputs.min_required_gb }}GB
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
